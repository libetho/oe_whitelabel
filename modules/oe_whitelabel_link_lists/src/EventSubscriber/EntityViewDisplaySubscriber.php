<?php

declare(strict_types = 1);

namespace Drupal\oe_whitelabel_link_lists\EventSubscriber;

use Drupal\oe_link_lists\Event\EntityValueResolverEvent;
use Drupal\oe_whitelabel_link_lists\Event\EntityViewDisplayEntityOverridesEvent;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

/**
 * Subscribes to events launched by entity view display plugins.
 */
class EntityViewDisplaySubscriber implements EventSubscriberInterface {

  /**
   * Mappings of bundles and their "teaser" fields.
   */
  protected const MAPPING = [
    'oe_project' => 'oe_teaser',
    'oe_sc_event' => 'oe_summary',
    'oe_sc_news' => 'oe_summary',
    'oe_sc_publication' => 'oe_summary',
  ];

  /**
   * {@inheritdoc}
   */
  public static function getSubscribedEvents() {
    return [
      EntityValueResolverEvent::NAME => 'setTeaserFromEntity',
      EntityViewDisplayEntityOverridesEvent::class => 'applyLinkOverridesToEntity',
    ];
  }

  /**
   * Sets the link teaser from the correct entity field.
   *
   * @param \Drupal\oe_link_lists\Event\EntityValueResolverEvent $event
   *   The value resolver event.
   */
  public function setTeaserFromEntity(EntityValueResolverEvent $event): void {
    $entity = $event->getEntity();

    $bundle = $entity->bundle();
    if (!isset(self::MAPPING[$bundle])) {
      return;
    }

    $link = $event->getLink();
    $field = $entity->get(self::MAPPING[$bundle]);
    $link->setTeaser($field->isEmpty() ? [] : $field->first()->getValue());
  }

  /**
   * Applies link field overrides to the entity.
   *
   * @param \Drupal\oe_whitelabel_link_lists\Event\EntityViewDisplayEntityOverridesEvent $event
   *   The override event.
   */
  public function applyLinkOverridesToEntity(EntityViewDisplayEntityOverridesEvent $event): void {
    $link = $event->getLink();
    $entity = $event->getEntity();

    $label_key = $entity->getEntityType()->getKey('label');
    if ($label_key) {
      $entity->set($label_key, $link->getTitle());
    }

    $bundle = $entity->bundle();
    if (!isset(self::MAPPING[$bundle])) {
      return;
    }

    $teaser = $link->getTeaser();
    $field = self::MAPPING[$bundle];
    if (isset($teaser['#markup'])) {
      $entity->set($field, $teaser['#markup']);
    }
    // In case the teaser was overridden and a different value than the one
    // generated by DefaultManualLinksResolverSubscriber was set.
    // @see \Drupal\oe_link_lists_manual_source\EventSubscriber\DefaultManualLinksResolverSubscriber
    elseif (!empty($teaser)) {
      $entity->set($field, $teaser);
    }
  }

}
